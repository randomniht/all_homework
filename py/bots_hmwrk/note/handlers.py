from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
import sqlite3
from pathlib import Path
import app.keyboards as kb

router = Router()

DB_PATH = str(Path(__file__).with_name("tasker.db"))

class NoteState:
    def __init__(self):
        self.waiting_for_note = False

note_state = NoteState()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS note (
            tg_id INTEGER,
            name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        conn.commit()

init_db()

# ‚Äî‚Äî‚Äî utils ‚Äî‚Äî‚Äî
def norm(text: str | None) -> str:
    return (text or "").strip().lower()

async def send_long(message: Message, text: str, chunk=4000):
    for i in range(0, len(text), chunk):
        await message.answer(text[i:i+chunk])

# ‚Äî‚Äî‚Äî handlers ‚Äî‚Äî‚Äî

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –í–∞—à ID: {message.from_user.id}\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏",
        reply_markup=kb.main
    )

# INFO (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
@router.message(F.text.func(lambda t: norm(t) == "info"))
async def cmd_info(message: Message):
    await message.answer("–ë–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –¥–æ–±–∞–≤–∏—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏.")

# ADD TASK (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
@router.message(F.text.func(lambda t: norm(t) == "add task"))
async def cmd_add_task(message: Message):
    note_state.waiting_for_note = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ ‚Äî —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –∂–¥—ë–º –≤–≤–æ–¥
@router.message(lambda m: note_state.waiting_for_note and bool(norm(m.text)))
async def save_task_text(message: Message):
    note_state.waiting_for_note = False  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO note (tg_id, name) VALUES (?, ?)",
                (message.from_user.id, message.text.strip())
            )
            conn.commit()
        await message.answer("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    except sqlite3.Error as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

# SHOW (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
@router.message(F.text.func(lambda t: norm(t) == "show"))
async def cmd_show(message: Message):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT name, created_at FROM note WHERE tg_id = ? ORDER BY created_at DESC",
                (message.from_user.id,)
            )
            notes = cursor.fetchall()
    except sqlite3.Error as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return

    if not notes:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return

    lines = ["üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:", ""]
    for idx, (name, created_at) in enumerate(notes, start=1):
        lines.append(f"{idx}. {name}  üïí {created_at}")
    text = "\n".join(lines)

    if len(text) > 4000:
        await send_long(message, text)
    else:
        await message.answer(text)

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º—è–≥–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ù–ï –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã)
@router.message()
async def fallback(message: Message):
    # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º
    # –º–æ–∂–Ω–æ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
    # await message.answer("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ: Add task / SHOW / INFO")
    pass
