from aiogram import Router
from aiogram import F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.types import ContentType
import sqlite3
import app.keyboards as kb
router = Router()

def init_db():
    db = sqlite3.connect('tasker.db')

    c = db.cursor()
    c.execute("""
    CREATE TABLE IF NOT EXISTS note (
        tg_id INTEGER,
        name TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """)

    db.commit()

    db.close()

init_db()
class Config:
    def __init__(self):
        self.user_id = None
        self.name = None
config = Config()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(f"–ö—É, –≤–æ—Ç —á—Ç–æ —è –º–æ–≥—É, –í–∞—à ID: {message.from_user.id}", reply_markup= kb.main)
    config.user_id = message.from_user.id
   




@router.message(F.text == 'INFO')
async def cmd_info(message: Message):
    await message.answer('–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–º–µ—Ç–æ–∫,  –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')

@router.message(F.text == 'Add task')
async def cmd_add_task(message: Message):
    config.user_id = message.from_user.id
    await message.answer("–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")

@router.message()
async def save_task_text(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    if config.user_id == message.from_user.id:
        task_text = message.text  # –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
        config.user_id = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        config.name = task_text
        try:
            conn = sqlite3.connect('tasker.db')
            c = conn.cursor()
            c.execute(
                "INSERT INTO note (tg_id, name) VALUES (?, ?)",
                (config.user_id, config.name)
            )
            conn.commit()
            await message.answer("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        except sqlite3.Error as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        finally:
            conn.close()
            config.user_id = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@router.message(F.text == 'SHOW')  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–º–µ—Ç–æ–∫
async def show_notes(message: Message):
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = sqlite3.connect('tasker.db')
        cursor = conn.cursor()
        
        # –î–æ—Å—Ç–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "SELECT name, created_at FROM note WHERE tg_id = ? ORDER BY created_at DESC",
            (message.from_user.id,)
        )
        notes = cursor.fetchall()
        
        if not notes:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫!")
            return
        notes_text = "\n".join(
            [f"üìå {note[0]} (–¥–∞—Ç–∞: {note[1]})" for note in notes]
        )
        await message.answer(f"–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n{notes_text}")
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()

